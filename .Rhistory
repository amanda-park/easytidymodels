stratifyOnResponse = TRUE,
responseVar = resp)
#Create recipe for feature engineering for dataset, varies based on data working with
rec <- recipe(formula, data = split$train) %>%
step_knnimpute(!!resp) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_medianimpute(all_predictors()) %>%
step_normalize(all_predictors())
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_nzv(all_predictors()) %>%
step_corr(all_numeric(), -all_outcomes(), threshold = .8) %>%
prep()
#Define your response variable and formula object here
resp <- "sex"
formula <- stats::as.formula(paste(resp, ".", sep="~"))
#Split data into training and testing sets
split <- trainTestSplit(penguins,
stratifyOnResponse = TRUE,
responseVar = resp)
#Create recipe for feature engineering for dataset, varies based on data working with
rec <- recipe(formula, data = split$train) %>%
step_knnimpute(!!resp) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_medianimpute(all_predictors()) %>%
step_normalize(all_predictors()) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_nzv(all_predictors()) %>%
step_corr(all_numeric(), -all_outcomes(), threshold = .8) %>%
prep()
train_df <- bake(rec, split$train)
test_df <- bake(rec, split$test)
folds <- cvFolds(train_df)
knnClass <- knnClassif(
recipe = rec,
response = resp,
folds = folds,
train = train_df,
test = test_df
)
#Visualize training data and its predictions
knnClass$trainPred %>% select(.pred, !!resp)
knnClass$trainPred
#View how model metrics for RMSE, R-Squared, and MAE look for training data
knnClass$trainScore
#Visualize testing data and its predictions
knnClass$testPred %>% select(.pred_class, !!resp)
#View how model metrics for RMSE, R-Squared, and MAE look for testing data
knnClass$testScore
#See the final model chosen by KNN based on optimizing for your chosen evaluation metric
knnClass$final
#See how model fit looks based on another evaluation metric
knnClass$tune %>% tune::show_best("roc_auc")
lr <- logRegBinary(recipe = rec,
response = resp,
folds = folds,
train = train_df,
test = test_df)
#
lr$trainConfMat
#Plot of confusion matrix
lr$trainConfMatPlot
#Test Confusion Matrix
lr$testConfMat
#Test Confusion Matrix Plot
lr$testConfMatPlot
svmClass <- svmClassif(
recipe = rec,
response = resp,
folds = folds,
train = train_df,
test = test_df
)
svmClass <- svmClassif(
recipe = rec,
response = resp,
folds = folds,
train = train_df,
test = test_df,
metric = "bal_accuracy"
)
svmClass <- svmClassif(
recipe = rec,
response = resp,
folds = folds,
train = train_df,
test = test_df,
evalMetric = "bal_accuracy"
)
#Visualize training data and its predictions
svmClass$trainConfMat
#View how model metrics for RMSE, R-Squared, and MAE look for training data
svmClass$trainScore
#Visualize testing data and its predictions
svmClass$testConfMat
#View how model metrics for RMSE, R-Squared, and MAE look for testing data
svmClass$testScore
#See the final model chosen by svm based on optimizing for your chosen evaluation metric
svmClass$final
#See how model fit looks based on another evaluation metric
svmClass$tune %>% tune::show_best("roc_auc")
pkgdown::build_articles()
xgClass <- xgBinaryClassif(
recipe = rec,
response = resp,
folds = folds,
train = train_df,
test = test_df,
evalMetric = "roc_auc"
)
#All the same functions for logistic regression work here, but also others:
#Feature importance plot
xgClass$featImpPlot
#Feature importance variables
xgClass$featImpVars
https://usethis.r-lib.org/reference/use_github_action.html
usethis::use_github_action("pkgdown")
knit_readme()
build_readme()
build_readme()
deploy_site_github()
pkgdown::deploy_site_github()
pkgdown::preview_site()
pkgdown::build_articles()
pkgdown::build_reference()
pkgdown::build_home()
pkgdown::build_tutorials()
pkgdown::preview_site()
require(devtools)
require(pkgdown)
install.packages("pkgdown")
require(pkgdown)
pkgdown::build_site()
?logRegMulti
document()
require(easytidymodels)
?logRegMulti
?marsRegress
pkgdown::build_site()
build_readme()
build_readme()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
shiny::runApp('C:/Users/youid/Documents/GitHub/Tidy-Tuesday/Shiny App - Pokemon & Pokedex/PokemonShiny')
setwd("C:/Users/youid/Documents/GitHub/Tidy-Tuesday/Shiny App - Pokemon & Pokedex")
runApp('PokemonShiny')
runApp()
library(shinydashboard)
library(shiny)
require(pacman)
p_load(tidyverse,
tidytext,
ggplot2,
textdata,
wordcloud,
keras,
tokenizers,
purrr)
setwd("C:/Users/youid/Documents/GitHub/Tidy-Tuesday/Shiny App - Pokemon & Pokedex")
data <- read.csv("PokedexEntries.csv")
data <- tibble(data[,-1])
statsData <- read.csv("pokemonStats.csv")
knitr::opts_chunk$set(echo = TRUE)
require(pacman)
p_load(tidyverse,
tidytext,
ggplot2,
textdata,
wordcloud,
keras,
tokenizers,
purrr)
setwd("C:/Users/youid/Dropbox/Professional/Pokemon")
data <- read.csv("PokedexEntries.csv")
data <- tibble(data[,-1])
statsData <- read.csv("pokemonStats.csv")
statsData <- statsData %>%
select(name, generation, type1, type2) %>%
mutate(
grassType = as.factor(if_else(type1 == "grass", 1, if_else(type2 == "grass", 1, 0))),
normalType = as.factor(if_else(type1 == "normal", 1, if_else(type2 == "normal", 1, 0))),
fireType = as.factor(if_else(type1 == "fire", 1, if_else(type2 == "fire", 1, 0))),
waterType = as.factor(if_else(type1 == "water", 1, if_else(type2 == "water", 1, 0))),
groundType = as.factor(if_else(type1 == "ground", 1, if_else(type2 == "ground", 1, 0))),
rockType = as.factor(if_else(type1 == "rock", 1, if_else(type2 == "rock", 1, 0))),
iceType = as.factor(if_else(type1 == "ice", 1, if_else(type2 == "ice", 1, 0))),
electricType = as.factor(if_else(type1 == "electric", 1, if_else(type2 == "electric", 1, 0))),
psychicType = as.factor(if_else(type1 == "psychic", 1, if_else(type2 == "psychic", 1, 0))),
ghostType = as.factor(if_else(type1 == "ghost", 1, if_else(type2 == "ghost", 1, 0))),
darkType = as.factor(if_else(type1 == "dark", 1, if_else(type2 == "dark", 1, 0))),
fightingType = as.factor(if_else(type1 == "fighting", 1, if_else(type2 == "fighting", 1, 0))),
dragonType = as.factor(if_else(type1 == "dragon", 1, if_else(type2 == "dragon", 1, 0))),
fairyType = as.factor(if_else(type1 == "fairy", 1, if_else(type2 == "fairy", 1, 0))),
bugType = as.factor(if_else(type1 == "bug", 1, if_else(type2 == "bug", 1, 0))),
poisonType = as.factor(if_else(type1 == "poison", 1, if_else(type2 == "poison", 1, 0))),
flyingType = as.factor(if_else(type1 == "flying", 1, if_else(type2 == "flying", 1, 0))),
steelType = as.factor(if_else(type1 == "steel", 1, if_else(type2 == "steel", 1, 0)))
)
View(statsData)
statsData <- read.csv("pokemonStats.csv")
View(statsData)
runApp()
View(data)
View(statsData)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(data)
View(statsData)
View(data)
runApp()
runApp()
shiny::runApp('C:/Users/youid/Documents/GitHub/Tidy-Tuesday/Shiny App - Pokemon & Pokedex')
library(shinydashboard)
library(shiny)
require(pacman)
p_load(tidyverse,
tidytext,
ggplot2,
textdata,
wordcloud,
keras,
tokenizers,
purrr)
setwd("C:/Users/youid/Documents/GitHub/Tidy-Tuesday/Shiny App - Pokemon & Pokedex")
data <- read.csv("PokedexEntries.csv")
data <- tibble(data[,-1])
#Load stopwords
data(stop_words)
#Create tidy data for analysis
tidyData <- data %>%
unnest_tokens(word, PokedexEntry) %>%
anti_join(stop_words)
statsData <- read.csv("pokemonStats.csv")
statsData <- statsData %>%
select(name, generation, type1, type2, attack, defense, speed,
sp_attack, sp_defense, hp, is_legendary) %>%
mutate(
grassType = as.factor(if_else(type1 == "grass", 1, if_else(type2 == "grass", 1, 0))),
normalType = as.factor(if_else(type1 == "normal", 1, if_else(type2 == "normal", 1, 0))),
fireType = as.factor(if_else(type1 == "fire", 1, if_else(type2 == "fire", 1, 0))),
waterType = as.factor(if_else(type1 == "water", 1, if_else(type2 == "water", 1, 0))),
groundType = as.factor(if_else(type1 == "ground", 1, if_else(type2 == "ground", 1, 0))),
rockType = as.factor(if_else(type1 == "rock", 1, if_else(type2 == "rock", 1, 0))),
iceType = as.factor(if_else(type1 == "ice", 1, if_else(type2 == "ice", 1, 0))),
electricType = as.factor(if_else(type1 == "electric", 1, if_else(type2 == "electric", 1, 0))),
psychicType = as.factor(if_else(type1 == "psychic", 1, if_else(type2 == "psychic", 1, 0))),
ghostType = as.factor(if_else(type1 == "ghost", 1, if_else(type2 == "ghost", 1, 0))),
darkType = as.factor(if_else(type1 == "dark", 1, if_else(type2 == "dark", 1, 0))),
fightingType = as.factor(if_else(type1 == "fighting", 1, if_else(type2 == "fighting", 1, 0))),
dragonType = as.factor(if_else(type1 == "dragon", 1, if_else(type2 == "dragon", 1, 0))),
fairyType = as.factor(if_else(type1 == "fairy", 1, if_else(type2 == "fairy", 1, 0))),
bugType = as.factor(if_else(type1 == "bug", 1, if_else(type2 == "bug", 1, 0))),
poisonType = as.factor(if_else(type1 == "poison", 1, if_else(type2 == "poison", 1, 0))),
flyingType = as.factor(if_else(type1 == "flying", 1, if_else(type2 == "flying", 1, 0))),
steelType = as.factor(if_else(type1 == "steel", 1, if_else(type2 == "steel", 1, 0)))
)
runApp()
p_load(tidyverse,
tidytext,
ggplot2,
textdata,
wordcloud,
keras,
tokenizers,
purrr,
plotly)
?plot_ly
fig <- plot_ly(
type = "scatterpolar",
r = c(statsData$attack, statsData$defense, statsData$sp_attack,
statsData$sp_defense, statsData$speed, statsData$attack),
theta = c("Attack", "Defense", "Special Attack",
"Special Defense", "Speed", "Attack"),
fill = 'toself'
)
fig
pkmnIndivData <- statsData %>%
filter(name == "Bulbasaur")
fig <- plot_ly(
type = "scatterpolar",
r = c(pkmnIndivData$attack, pkmnIndivData$defense, pkmnIndivData$sp_attack,
pkmnIndivData$sp_defense, pkmnIndivData$speed, pkmnIndivData$attack),
theta = c("Attack", "Defense", "Special Attack",
"Special Defense", "Speed", "Attack"),
fill = 'toself'
)
fig
fig <- plot_ly(
type = "scatterpolar",
r = c(pkmnIndivData$attack, pkmnIndivData$defense, pkmnIndivData$sp_attack,
pkmnIndivData$sp_defense, pkmnIndivData$speed, pkmnIndivData$attack),
theta = c("Attack", "Defense", "Special Attack",
"Special Defense", "Speed", "Attack"),
fill = 'toself'
) %>%
layout(
polar = list(
radialaxis = list(
visible = T,
range = c(0, 255)
)
),
showlegend = F
)
fig
fig <- plot_ly(
type = "scatterpolar",
r = c(pkmnIndivData$attack, pkmnIndivData$defense, pkmnIndivData$sp_attack,
pkmnIndivData$sp_defense, pkmnIndivData$speed, pkmnIndivData$attack),
theta = c("Attack", "Defense", "Special Attack",
"Special Defense", "Speed", "Attack"),
fill = 'toself'
) %>%
layout(
polar = list(
radialaxis = list(
visible = T,
range = c(0, 255)
)
),
showlegend = F,
title = paste0("Bulbasaur Fighting Statistics")
)
fig
runApp()
runApp()
plot_ly(
type = "scatterpolar",
r = c(pkmnIndivData$attack, pkmnIndivData$defense, pkmnIndivData$sp_attack,
pkmnIndivData$sp_defense, pkmnIndivData$speed, pkmnIndivData$attack),
theta = c("Attack", "Defense", "Special Attack",
"Special Defense", "Speed", "Attack"),
fill = 'toself'
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?box
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tst <- tidyData %>% left_join(statsData, by = c("Pokemon" = "name"))
View(tst)
tst %>% filter(generation == 1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("espnscraper")
install.packages("espnscrapeR")
install.packages(
"nflscrapR"
)
install.packages("nflfastR
")
require(devtools)
knitr::opts_chunk$set(echo = TRUE)
require(devtools)
require(tidymodels)
remotes::install_github("jthomasmock/espnscrapeR")
require(espnscrapeR)
require(DBI)
pbp_db <- tbl(DBI::dbConnect(RSQLite::SQLite(), "pbp_db.sqlite"), "pbp_clean_2000-2019")
require(RSQLite)
pbp_db <- tbl(DBI::dbConnect(RSQLite::SQLite(), "pbp_db.sqlite"), "pbp_clean_2000-2019")
install.packages("nflfastr")
install.packages("nflfastR")
knitr::opts_chunk$set(echo = TRUE)
require(devtools)
require(tidymodels)
require(tidyverse)
require(nflfastR)
knitr::opts_chunk$set(echo = TRUE)
require(devtools)
require(tidymodels)
require(tidyverse)
require(nflfastR)
knitr::opts_chunk$set(echo = TRUE)
set.seed(42)
require(devtools)
require(tidymodels)
require(tidyverse)
require(nflfastR)
seasons <- 2007:2011
dat <- purrr::map_df(seasons, function(x) {
readRDS(
url(
glue::glue("https://raw.githubusercontent.com/guga31bb/nflfastR-data/master/data/play_by_play_{x}.rds")
)
)
})
diagnose(dat)
require(dlookr)
set.seed(42)
require(pacman)
p_load(easytidymodels,
tidyverse,
recipes,
tidymodels,
nflfastR,
dlookr,
explore)
seasons <- 2007:2011
View(dat)
knitr::opts_chunk$set(echo = TRUE)
set.seed(42)
require(pacman)
p_load(easytidymodels,
tidyverse,
recipes,
tidymodels,
nflfastR,
dlookr,
explore)
seasons <- 2007
dat <- purrr::map_df(seasons, function(x) {
readRDS(
url(
glue::glue("https://raw.githubusercontent.com/guga31bb/nflfastR-data/master/data/play_by_play_{x}.rds")
)
)
})
View(dat)
knitr::opts_chunk$set(echo = TRUE)
set.seed(42)
require(pacman)
p_load(easytidymodels,
tidyverse,
recipes,
tidymodels,
nflfastR,
dlookr,
explore,
janitor)
seasons <- 2007
dat <- purrr::map_df(seasons, function(x) {
readRDS(
url(
glue::glue("https://raw.githubusercontent.com/guga31bb/nflfastR-data/master/data/play_by_play_{x}.rds")
)
)
})
nyDat <- dat %>%
clean_names()
nyDat <- dat %>%
clean_names() %>%
filter(home_team = "NYG" | away_team = "NYG")
nyDat <- dat %>%
clean_names() %>%
filter(home_team == "NYG" | away_team == "NYG")
View(nyDat)
nyOff <- nyDat %>%
filter(posteam == "NYG")
View(nyOff)
nyOff <- nyDat %>%
filter(posteam == "NYG") %>%
select(week, game_seconds_remaining, down, play_type, yards_gained, qb_dropback, pass_length, yards_after_catch, score_differential, incomplete_pass, interception, fumble, rush_attempt, pass_attempt, qb_hit, sack, touchdown, drive_first_downs)
nyOff <- nyDat %>%
filter(posteam == "NYG") %>%
select(week, game_seconds_remaining, down, play_type, yards_gained, qb_dropback, pass_length, yards_after_catch, score_differential, incomplete_pass, interception, fumble, rush_attempt, pass_attempt, qb_hit, sack, touchdown, drive_first_downs) %>%
group_by(week) %>%
summarize(count = n())
