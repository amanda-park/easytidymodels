trainTestSplit <- function(data = dat,
splitAmt = .8,
timeDependent = FALSE,
responseVar = "has30DayReadmission",
stratifyOnResponse = FALSE) {
if(timeDependent == FALSE) {
if(stratifyOnResponse == FALSE) {
split <- rsample::initial_split(data,
prop = splitAmt)
}
else {
split <- rsample::initial_split(data,
prop = splitAmt,
strata = !!responseVar)
}
}
else {
split <- rsample::initial_time_split(data,
prop = splitAmt)
}
datTrain <- training(split)
datTest <- testing(split)
datBoot <- bootstraps(datTrain)
res <- list("datTrain" = datTrain,
"datTest" = datTest,
"datBoot" = datBoot)
return(res)
}
use_r("trainTestSplit")
require(devtools)
use_r("trainTestSplit")
load_all()
load_all()
knitr::opts_chunk$set(echo = TRUE)
#Set working directory and load functions in
#setwd("C:/Users/youid/Dropbox/Professional")
source("TidyModelsFunctions.R")
require(pacman)
p_load(
tidymodels,
vip,
fastshap,
doParallel,
xgboost,
glmnet,
earth,
patchwork,
margins,
ggfortify,
modeltime,
timetk,
modeltime.ensemble,
modeltime.resample,
update = FALSE
)
set.seed(24)
d <- data.frame(a = c(rep(1, 50), rep(0, 50)),
b = rnorm(100),
c = rnorm(100),
da = c(rnorm(55), rnorm(45, 5)),
e = c(rnorm(30, 1), rnorm(70, 5)),
f = c(rnorm(40, 0), rnorm(60, 4))
#g = c(rep(1, 20), rep(2, 40), rep(3, 40))
)
d$a <- as.factor(d$a)
#d$g <- as.factor(d$g)
knitr::opts_chunk$set(echo = TRUE)
#Set working directory and load functions in
#setwd("C:/Users/youid/Dropbox/Professional")
#source("TidyModelsFunctions.R")
require(pacman)
p_load(
tidymodels,
vip,
fastshap,
doParallel,
xgboost,
glmnet,
earth,
patchwork,
margins,
ggfortify,
modeltime,
timetk,
modeltime.ensemble,
modeltime.resample,
update = FALSE
)
set.seed(24)
d <- data.frame(a = c(rep(1, 50), rep(0, 50)),
b = rnorm(100),
c = rnorm(100),
da = c(rnorm(55), rnorm(45, 5)),
e = c(rnorm(30, 1), rnorm(70, 5)),
f = c(rnorm(40, 0), rnorm(60, 4))
#g = c(rep(1, 20), rep(2, 40), rep(3, 40))
)
d$a <- as.factor(d$a)
#d$g <- as.factor(d$g)
trainTestSplit(data = d, responseVar = "da")
check()
use_mit_license()
options(usethis.full_name = "Amanda Park")
use_mit_license()
use_mit_license()
use_mit_license()
document()
?trainTestSplit
?trainTestSplit
document()
?trainTestSplit
document()
?trainTestSplit
check()
export(trainTestSplit)
install()
trainTestSplit(d, responseVar = "da")
use_testthat()
use_test()
use_package()
use_package("tidymodels")
?training
